{"version":3,"sources":["atoms.tsx","App.tsx","reportWebVitals.ts","index.tsx","app.module.scss"],"names":["quoteState","atom","key","default","text","author","allQuotesState","QuoteBox","rand","useRecoilState","quote","setQuote","allQuotes","useRecoilValue","newQuote","Math","floor","random","length","className","styles","quoteBody","quoteText","fadein","buttonContainer","onClick","console","log","App","setAllQuotes","useSetRecoilState","useEffect","a","fetch","resp","json","body","getAllQuotes","quoteContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"mPAUaA,EAAaC,YAAK,CAC7BC,IAAK,QACLC,QAAS,CACPC,KAAM,GACNC,OAAQ,MAICC,EAAiBL,YAAkB,CAC9CC,IAAK,YACLC,QAAS,K,OCOX,SAASI,IAAY,IAGfC,EAHc,EACQC,YAAeT,GADvB,mBACXU,EADW,KACJC,EADI,KAEZC,EAAYC,YAAeP,GAO3BQ,EAAW,WACfN,EAAOO,KAAKC,MAAMD,KAAKE,SAAWL,EAAUM,QACxCN,EAAUM,OAAS,GACrBP,EAAS,CACPP,KAAMQ,EAAUJ,GAAME,MACtBL,OAAQO,EAAUJ,GAAMH,UAQ9B,OAJKK,EAAMN,MAASM,EAAML,QACxBS,IAIA,sBAAKK,UAAWC,IAAOC,UAAvB,UACE,sBAAKF,UAAWC,IAAOE,UAAY,IAAMF,IAAOG,OAAhD,UACGb,EAAMN,KACP,qCAAQM,EAAML,aAEhB,sBAAKc,UAAWC,IAAOI,gBAAvB,UACE,wBAAQC,QAxBE,WACdC,QAAQC,IAAI,kBAuBR,mBAGA,wBAAQF,QAASX,EAAjB,6BAQOc,MA9Df,WACE,IAAMC,EAAeC,YAAkBxB,GAavC,OAXAyB,qBAAU,YACU,uCAAG,8BAAAC,EAAA,4DAEjB,yIAFiB,SAGAC,MADjB,0IAFiB,cAGbC,EAHa,gBAIAA,EAAKC,OAJL,OAIbC,EAJa,OAKnBP,EAAaO,EAAI,QALE,2CAAH,qDAOlBC,MAIA,sBAAKlB,UAAWC,IAAOkB,eAAvB,UACE,sDACA,cAAC/B,EAAD,QCRSgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,K,kBClBAc,EAAOC,QAAU,CAAC,eAAiB,4BAA4B,UAAY,uBAAuB,UAAY,uBAAuB,OAAS,oBAAoB,gBAAkB,gC","file":"static/js/main.0bcb803b.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\n\n// List of quotes interface\ninterface allQuotes {\n  quote: string;\n  author: string;\n}\n\n// Setup state atoms\nexport const quoteState = atom({\n  key: \"quote\",\n  default: {\n    text: \"\",\n    author: \"\",\n  },\n});\n\nexport const allQuotesState = atom<allQuotes[]>({\n  key: \"allQuotes\",\n  default: [],\n});\n","import React, { useEffect } from \"react\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport styles from \"./app.module.scss\";\nimport { allQuotesState, quoteState } from \"./atoms\";\n\nfunction App() {\n  const setAllQuotes = useSetRecoilState(allQuotesState);\n\n  useEffect(() => {\n    const getAllQuotes = async () => {\n      const url =\n        \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n      const resp = await fetch(url);\n      const body = await resp.json();\n      setAllQuotes(body[\"quotes\"]);\n    };\n    getAllQuotes();\n  });\n\n  return (\n    <div className={styles.quoteContainer}>\n      <h1>Random Quote Machine</h1>\n      <QuoteBox />\n    </div>\n  );\n}\n\nfunction QuoteBox() {\n  const [quote, setQuote] = useRecoilState(quoteState);\n  const allQuotes = useRecoilValue(allQuotesState);\n  let rand: number;\n\n  const doTweet = () => {\n    console.log(\"Did the Tweet\");\n  };\n\n  const newQuote = () => {\n    rand = Math.floor(Math.random() * allQuotes.length);\n    if (allQuotes.length > 0)\n      setQuote({\n        text: allQuotes[rand].quote,\n        author: allQuotes[rand].author,\n      });\n  };\n\n  if (!quote.text || !quote.author) {\n    newQuote()\n  }\n\n  return (\n    <div className={styles.quoteBody}>\n      <div className={styles.quoteText + \" \" + styles.fadein}>\n        {quote.text}\n        <div>- {quote.author}</div>\n      </div>\n      <div className={styles.buttonContainer}>\n        <button onClick={doTweet}>\n          Tweet\n        </button>\n        <button onClick={newQuote}>\n          New Quote\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { RecoilRoot } from 'recoil';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quoteContainer\":\"app_quoteContainer__2sO-I\",\"quoteBody\":\"app_quoteBody__23e37\",\"quoteText\":\"app_quoteText__tVvQi\",\"fadeIn\":\"app_fadeIn__F1Y0H\",\"buttonContainer\":\"app_buttonContainer__26AGL\"};"],"sourceRoot":""}